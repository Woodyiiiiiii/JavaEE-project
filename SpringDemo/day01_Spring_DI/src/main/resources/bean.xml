<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- Spring中的依赖注入
            依赖注入：
                    Dependency Injection，简称DI
         IOC的作用：
                    降低程序间的耦合(依赖关系)
         依赖关系的管理：
                    以后都交给Spring来维护
         在当前类中需要用到其他类的对象时，由Spring为我们提供，我们只需要在配置文件中说明
         依赖关系的维护：
                    就称之为依赖注入。
         依赖注入：
            能注入的数据有三类：
                1. 基本类型和String
                2. 其他Bean类型(配置文件中或者注解配置过的bean)
                3. 复杂类型/集合类型
            注入的方式有三种：
                1. 使用构造函数提供
                2. 使用set方法提供
                3. 使用注解提供(第二天的内容)
     -->

    <!-- 构造函数注入
            使用的标签：constructor-arg
            标签出现的位置：bean标签的内部
            标签中的属性：
                type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型
                index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，参数索引位置从零开始
                name：用于指定给构造函数中指定名称的参数赋值——————————————————————常用
                ==================以上参数用于指定给构造函数中哪个参数赋值==================
                value：用于提供基本类型和Spring类型的数据
                ref：用于指定其他的bean类型数据，它指的是在Spring的IOC核心容器中出现过的bean对象

            优势：
                在获取bean对象时，注入数据是必须的操作，否则无法创建成功
            劣势：
                改变了bean对象的实例化方式，是我们在创建对象时，如果我们用不到这些数据，也必须提供
    -->
    <bean id="accountService" class="com.woody.service.impl.AccountServiceImpl">
        <constructor-arg name="name" value="泰斯特"></constructor-arg>
        <constructor-arg name="age" value="18"></constructor-arg>
        <constructor-arg name="birthday" ref="now"></constructor-arg>
    </bean>

    <!-- 配置一个日期对象
            读取class(全限定类名)来反射创建一个对象，并存入Spring核心容器中
            我们可以用id来取出此对象
    -->
    <bean id="now" class="java.util.Date"></bean>


    <!-- set方法注入————更常用
            涉及的标签：property
            出现的位置：bean的内部
            标签的属性：
                name：用于指定注入时所调用的set方法参数名称
                value：用于提供基本类型和Spring类型的数据
                ref：用于指定其他的bean类型数据，它指的是在Spring的IOC核心容器中出现过的bean对象
            优势：
                创建对象时没有明确限制，可以直接使用默认构造函数
            弊端：
                如果某个成员必须有值，则获取对象时有可能set方法没有执行
    -->
    <bean id="accountService2" class="com.woody.service.impl.AccountServiceImpl2">
        <property name="name" value="test"></property>
        <property name="age"  value="19"></property>
        <property name="birthday" ref="now"></property>
    </bean>

    <!-- 复杂类型的注入/集合类型的注入
            可采用Set注入或者构造函数注入
            因为set更常用，所以使用set作为示例

            用于给list结构集合注入的标签：
                list array set
            用于给Map结构集合注入的标签：
                map props
            结构相同，标签可以互换
    -->
    <bean id="accountService3" class="com.woody.service.impl.AccountServiceImpl3">
        <property name="strings">
            <array>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </array>
        </property>

        <property name="list">
            <list>
                <value>EEEEEE</value>
                <value>EEFFAFA</value>
                <value>EFEFF</value>
            </list>
        </property>

        <property name="stringSet">
            <set>
                <value>AAA</value>
                <value>BBB</value>
                <value>CCC</value>
            </set>
        </property>

        <property name="stringStringMap">
            <map>
                <!--两种写法-->
                <entry key="testA" value="aaa"></entry>
                <entry key="testB">
                    <value>FDFSD</value>
                </entry>
            </map>
        </property>

        <property name="properties">
            <props>
                <prop key="test214">fadsfas</prop>
                <prop key="test2414214">fdafdsaf</prop>
            </props>
        </property>
    </bean>

</beans>